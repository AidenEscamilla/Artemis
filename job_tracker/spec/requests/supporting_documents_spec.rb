require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/supporting_documents", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # SupportingDocument. As you add validations to SupportingDocument, be sure to
  # adjust the attributes here as well.
  let(:employer) { create(:employer) }
  let(:job_application) { create(:job_application, employer: employer) }

  let(:valid_attributes) {
    {
      name: "Resume",
      document: Rack::Test::UploadedFile.new("spec/fixtures/files/resume.pdf", "application/pdf"),
      job_application_id: job_application.id
    }
  }

  let(:invalid_attributes) {
    {
      name: nil,
      document: nil,
      job_application_id: nil
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      SupportingDocument.create! valid_attributes
      get supporting_documents_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      supporting_document = SupportingDocument.create! valid_attributes
      get supporting_document_url(supporting_document)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_supporting_document_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      supporting_document = SupportingDocument.create! valid_attributes
      get edit_supporting_document_url(supporting_document)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new SupportingDocument" do
        expect {
          post supporting_documents_url, params: { supporting_document: valid_attributes }
        }.to change(SupportingDocument, :count).by(1)
      end

      it "redirects to the created supporting_document" do
        post supporting_documents_url, params: { supporting_document: valid_attributes }
        expect(response).to redirect_to(supporting_document_url(SupportingDocument.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new SupportingDocument" do
        expect {
          post supporting_documents_url, params: { supporting_document: invalid_attributes }
        }.to change(SupportingDocument, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post supporting_documents_url, params: { supporting_document: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "Cover Letter",
          document: Rack::Test::UploadedFile.new("spec/fixtures/files/cover_letter.pdf", "application/pdf"),
          job_application_id: job_application.id
        }
      }

      it "updates the requested supporting_document" do
        supporting_document = SupportingDocument.create! valid_attributes
        patch supporting_document_url(supporting_document), params: { supporting_document: new_attributes }
        supporting_document.reload
        expect(supporting_document.name).to eq("Cover Letter")
      end

      it "redirects to the supporting_document" do
        supporting_document = SupportingDocument.create! valid_attributes
        patch supporting_document_url(supporting_document), params: { supporting_document: new_attributes }
        supporting_document.reload
        expect(response).to redirect_to(supporting_document_url(supporting_document))
      end
    end

    context "with invalid parameters" do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        supporting_document = SupportingDocument.create! valid_attributes
        patch supporting_document_url(supporting_document), params: { supporting_document: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested supporting_document" do
      supporting_document = SupportingDocument.create! valid_attributes
      expect {
        delete supporting_document_url(supporting_document)
      }.to change(SupportingDocument, :count).by(-1)
    end

    it "redirects to the supporting_documents list" do
      supporting_document = SupportingDocument.create! valid_attributes
      delete supporting_document_url(supporting_document)
      expect(response).to redirect_to(supporting_documents_url)
    end
  end
end
